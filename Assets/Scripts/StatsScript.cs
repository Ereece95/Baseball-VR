using UnityEngine;
using System.Collections;
using System.IO;
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;





// This code automatically generated by TableCodeGen




// This code automatically generated by TableCodeGen



public class StatsScript : MonoBehaviour
{

    public TextAsset file;

    void Start()
    {
        Load(file);
    }



    public class Row
    {
        public string Player;
        public string TotalPitchesThrown;
        public string TotalFastballs;
        public string TotalCurveballs;
        public string TotalChangeups;
        public string TotalSliders;
        public string TotalSinkers;
        public string FB_R;
        public string FB_L;
        public string CV_R;
        public string CV_L;
        public string CH_R;
        public string CH_L;
        public string SL_R;
        public string SL_L;
        public string SI_R;
        public string SI_L;

    }

    List<Row> rowList = new List<Row>();
    bool isLoaded = false;

    public bool IsLoaded()
    {
        return isLoaded;
    }

    public List<Row> GetRowList()
    {
        return rowList;
    }

    public void Load(TextAsset csv)
    {
        rowList.Clear();
        string[][] grid = CsvParser2.Parse(csv.text);
        for (int i = 1; i < grid.Length; i++)
        {
            Row row = new Row();
            row.Player = grid[i][0];
            row.TotalPitchesThrown = grid[i][1];
            row.TotalFastballs = grid[i][2];
            row.TotalCurveballs = grid[i][3];
            row.TotalChangeups = grid[i][4];
            row.TotalSliders = grid[i][5];
            row.TotalSinkers = grid[i][6];
            row.FB_R = grid[i][7];
            row.FB_L = grid[i][8];
            row.CV_R = grid[i][9];
            row.CV_L = grid[i][10];
            row.CH_R = grid[i][11];
            row.CH_L = grid[i][12];
            row.SL_R = grid[i][13];
            row.SL_L = grid[i][14];
            row.SI_R = grid[i][15];
            row.SI_L = grid[i][16];

            rowList.Add(row);
        }
        isLoaded = true;
    }

    public int NumRows()
    {
        return rowList.Count;
    }

    public Row GetAt(int i)
    {
        if (rowList.Count <= i)
            return null;
        return rowList[i];
    }

    public Row Find_Player(string find)
    {
        return rowList.Find(x => x.Player == find);
    }
    public List<Row> FindAll_Player(string find)
    {
        return rowList.FindAll(x => x.Player == find);
    }
    public Row Find_TotalPitchesThrown(string find)
    {
        return rowList.Find(x => x.TotalPitchesThrown == find);
    }
    public List<Row> FindAll_TotalPitchesThrown(string find)
    {
        return rowList.FindAll(x => x.TotalPitchesThrown == find);
    }
    public Row Find_TotalFastballs(string find)
    {
        return rowList.Find(x => x.TotalFastballs == find);
    }
    public List<Row> FindAll_TotalFastballs(string find)
    {
        return rowList.FindAll(x => x.TotalFastballs == find);
    }
    public Row Find_TotalCurveballs(string find)
    {
        return rowList.Find(x => x.TotalCurveballs == find);
    }
    public List<Row> FindAll_TotalCurveballs(string find)
    {
        return rowList.FindAll(x => x.TotalCurveballs == find);
    }
    public Row Find_TotalChangeups(string find)
    {
        return rowList.Find(x => x.TotalChangeups == find);
    }
    public List<Row> FindAll_TotalChangeups(string find)
    {
        return rowList.FindAll(x => x.TotalChangeups == find);
    }
    public Row Find_TotalSliders(string find)
    {
        return rowList.Find(x => x.TotalSliders == find);
    }
    public List<Row> FindAll_TotalSliders(string find)
    {
        return rowList.FindAll(x => x.TotalSliders == find);
    }
    public Row Find_TotalSinkers(string find)
    {
        return rowList.Find(x => x.TotalSinkers == find);
    }
    public List<Row> FindAll_TotalSinkers(string find)
    {
        return rowList.FindAll(x => x.TotalSinkers == find);
    }
    public Row Find_FB_R(string find)
    {
        return rowList.Find(x => x.FB_R == find);
    }
    public List<Row> FindAll_FB_R(string find)
    {
        return rowList.FindAll(x => x.FB_R == find);
    }
    public Row Find_FB_L(string find)
    {
        return rowList.Find(x => x.FB_L == find);
    }
    public List<Row> FindAll_FB_L(string find)
    {
        return rowList.FindAll(x => x.FB_L == find);
    }
    public Row Find_CV_R(string find)
    {
        return rowList.Find(x => x.CV_R == find);
    }
    public List<Row> FindAll_CV_R(string find)
    {
        return rowList.FindAll(x => x.CV_R == find);
    }
    public Row Find_CV_L(string find)
    {
        return rowList.Find(x => x.CV_L == find);
    }
    public List<Row> FindAll_CV_L(string find)
    {
        return rowList.FindAll(x => x.CV_L == find);
    }
    public Row Find_CH_R(string find)
    {
        return rowList.Find(x => x.CH_R == find);
    }
    public List<Row> FindAll_CH_R(string find)
    {
        return rowList.FindAll(x => x.CH_R == find);
    }
    public Row Find_CH_L(string find)
    {
        return rowList.Find(x => x.CH_L == find);
    }
    public List<Row> FindAll_CH_L(string find)
    {
        return rowList.FindAll(x => x.CH_L == find);
    }
    public Row Find_SL_R(string find)
    {
        return rowList.Find(x => x.SL_R == find);
    }
    public List<Row> FindAll_SL_R(string find)
    {
        return rowList.FindAll(x => x.SL_R == find);
    }
    public Row Find_SL_L(string find)
    {
        return rowList.Find(x => x.SL_L == find);
    }
    public List<Row> FindAll_SL_L(string find)
    {
        return rowList.FindAll(x => x.SL_L == find);
    }
    public Row Find_SI_R(string find)
    {
        return rowList.Find(x => x.SI_R == find);
    }
    public List<Row> FindAll_SI_R(string find)
    {
        return rowList.FindAll(x => x.SI_R == find);
    }
    public Row Find_SI_L(string find)
    {
        return rowList.Find(x => x.SI_L == find);
    }
    public List<Row> FindAll_SI_L(string find)
    {
        return rowList.FindAll(x => x.SI_L == find);
    }



}